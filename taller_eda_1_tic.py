# -*- coding: utf-8 -*-
"""Taller_EDA_1_TIC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JvVyh-kUaBaNxnM00J5UEegHuouNPf1S
"""

#Taller 1 EDA TICS en salud
#Paula Sofía Muñoz
import pandas as pd
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import statsmodels.api as sm
from statsmodels import robust

import scipy.stats as sp

from google.colab import drive
drive.mount("/content/drive/")

data_disease=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/new_model (1).csv")
print (data_disease)

"""Para realizar la proporción entre las categorías de la clase y cada atributo, primero se elige del dataset los atributos en los cuales sus datos son de tipo categóricos (Al, Su, Rbc, Htn)."""

data_categorico=data_disease.loc[:,['Al', 'Su', 'Rbc', 'Htn', 'Class']]
print(data_categorico)

#Se partirá sacando el tamaño y porcentaje de los datos categóricos de la clase:
data_total= data_categorico['Class'].size
data_si= data_categorico['Class'].value_counts()[1]
data_no= data_categorico['Class'].value_counts()[0]

por_class_si= data_si*100/data_total
por_class_no= data_no*100/data_total
print('El porcentaje de personas que padecen la enfermedad es:', por_class_si,'%')
print('El porcentaje de personas que no padecen la enfermedad es:', por_class_no,'%')

"""Se puede notar como la mayoría de la población analizada en este dataset padece enfermedad renal crónica, por diversos factores que se analizarán a continuación:"""

#Proporción entre los distintos tipos de albúmina (0,1,2,3,4,5) y la clase (1 y 0)
#No padecer la enfermedad
data_Al_0_0= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Al'] == 0)]
tamano_0= data_Al_0_0['Al'].size
porcentaje_Al_0_0= tamano_0*100/data_total
print('Los pacientes con nivel de albúmina 0 y que no padecen la enfermedad son: ',tamano_0 , '-->',porcentaje_Al_0_0,'%')

data_Al_0_1= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Al'] == 1)]
tamano_1=data_Al_0_1['Al'].size
porcentaje_Al_0_1= tamano_1*100/data_total
print('Los pacientes con nivel de albúmina 1 y que no padecen la enfermedad son: ',tamano_1, '-->',porcentaje_Al_0_1, '%')


data_Al_0_2= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Al'] == 2)]
tamano_2=data_Al_0_2['Al'].size
porcentaje_Al_0_2= tamano_2*100/data_total
print('Los pacientes con nivel de albúmina 2 y que no padecen la enfermedad son: ',tamano_2,'-->',porcentaje_Al_0_2, '%' )

data_Al_0_3= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Al'] == 3)]
tamano_3=data_Al_0_3['Al'].size
porcentaje_Al_0_3= tamano_3*100/data_total
print('Los pacientes con nivel de albúmina 3 y que no padecen la enfermedad son: ', tamano_3,'-->',porcentaje_Al_0_3, '%' )

data_Al_0_4= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Al'] == 4)]
tamano_4=data_Al_0_4['Al'].size
porcentaje_Al_0_4= tamano_4*100/data_total
print('Los pacientes con nivel de albúmina 4 y que no padecen la enfermedad son: ', tamano_4,'-->',porcentaje_Al_0_4, '%')

data_Al_0_5= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Al'] == 5)]
tamano_5=data_Al_0_5['Al'].size
porcentaje_Al_0_5= tamano_5*100/data_total
print('Los pacientes con nivel de albúmina 5 y que no padecen la enfermedad son: ', tamano_5,'-->',porcentaje_Al_0_5, '%')

#Padecer la enfermedad

data_Al_1_0= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Al'] == 0)]
tamano_6= data_Al_1_0['Al'].size
porcentaje_Al_1_0= tamano_6*100/data_total
print('Los pacientes con nivel de albúmina 0 y que padecen la enfermedad son: ',tamano_6,'-->',porcentaje_Al_1_0, '%' )

data_Al_1_1= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Al'] == 1)]
tamano_7= data_Al_1_1['Al'].size
porcentaje_Al_1_1= tamano_7*100/data_total
print('Los pacientes con nivel de albúmina 1 y que padecen la enfermedad son: ', tamano_7,'-->',porcentaje_Al_1_1, '%' )


data_Al_1_2= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Al'] == 2)]
tamano_8= data_Al_1_2['Al'].size
porcentaje_Al_1_2= tamano_8*100/data_total
print('Los pacientes con nivel de albúmina 2 y que padecen la enfermedad son: ',  tamano_8,'-->',porcentaje_Al_1_2, '%' )

data_Al_1_3= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Al'] == 3)]
tamano_9= data_Al_1_3['Al'].size
porcentaje_Al_1_3= tamano_9*100/data_total
print('Los pacientes con nivel de albúmina 3 y que  padecen la enfermedad son: ', tamano_9, '-->',porcentaje_Al_1_3, '%' )

data_Al_1_4= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Al'] == 4)]
tamano_10= data_Al_1_4['Al'].size
porcentaje_Al_1_4= tamano_10*100/data_total
print('Los pacientes con nivel de albúmina 4 y que padecen la enfermedad son: ',  tamano_10, '-->',porcentaje_Al_1_4, '%' )

data_Al_1_5= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Al'] == 5)]
tamano_11= data_Al_1_5['Al'].size
porcentaje_Al_1_5= tamano_11*100/data_total
print('Los pacientes con nivel de albúmina 5 y que padecen la enfermedad son: ',  tamano_11, '-->',porcentaje_Al_1_5, '%' )

"""Se puede concluir que la población que no padece la enfermedad está en niveles de albúmina del 0 y 1, sin embargo la población que si padece la enfermedad se ve afectada respecto a todos los niveles de albúmina sin influir en gran cantidad el nivel elevado de albúmina, por lo que no se puede calificar que a mayor albúmina mayor riesgo de padecer ERC."""

#Proporción entre los distintos tipos de Azúcar (0,1,2,3,4,5) y la clase (1 y 0)
#No padecer la enfermedad
data_Al_0_0= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Su'] == 0)]
tamano_0= data_Al_0_0['Su'].size
porcentaje_Al_0_0= tamano_0*100/data_total
print('Los pacientes con nivel de azúcar 0 y que no padecen la enfermedad son: ',tamano_0 , '-->',porcentaje_Al_0_0,'%')

data_Al_0_1= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Su'] == 1)]
tamano_1=data_Al_0_1['Su'].size
porcentaje_Al_0_1= tamano_1*100/data_total
print('Los pacientes con nivel de azúcar 1 y que no padecen la enfermedad son: ',tamano_1, '-->',porcentaje_Al_0_1, '%')


data_Al_0_2= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Su'] == 2)]
tamano_2=data_Al_0_2['Su'].size
porcentaje_Al_0_2= tamano_2*100/data_total
print('Los pacientes con nivel de azúcar 2 y que no padecen la enfermedad son: ',tamano_2,'-->',porcentaje_Al_0_2, '%' )

data_Al_0_3= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Su'] == 3)]
tamano_3=data_Al_0_3['Su'].size
porcentaje_Al_0_3= tamano_3*100/data_total
print('Los pacientes con nivel de azúcar 1 y que no padecen la enfermedad son: ', tamano_3,'-->',porcentaje_Al_0_3, '%' )

data_Al_0_4= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Su'] == 4)]
tamano_4=data_Al_0_4['Su'].size
porcentaje_Al_0_4= tamano_4*100/data_total
print('Los pacientes con nivel de azúcar 4 y que no padecen la enfermedad son: ', tamano_4,'-->',porcentaje_Al_0_4, '%')

data_Al_0_5= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Su'] == 5)]
tamano_5=data_Al_0_5['Su'].size
porcentaje_Al_0_5= tamano_5*100/data_total
print('Los pacientes con nivel de azúcar 5 y que no padecen la enfermedad son: ', tamano_5,'-->',porcentaje_Al_0_5, '%')

#Padecer la enfermedad

data_Al_1_0= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Su'] == 0)]
tamano_6= data_Al_1_0['Su'].size
porcentaje_Al_1_0= tamano_6*100/data_total
print('Los pacientes con nivel de azúcar 0 y que padecen la enfermedad son: ',tamano_6,'-->',porcentaje_Al_1_0, '%' )

data_Al_1_1= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Su'] == 1)]
tamano_7= data_Al_1_1['Su'].size
porcentaje_Al_1_1= tamano_7*100/data_total
print('Los pacientes con nivel de azúcar 1 y que padecen la enfermedad son: ', tamano_7,'-->',porcentaje_Al_1_1, '%' )


data_Al_1_2= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Su'] == 2)]
tamano_8= data_Al_1_2['Su'].size
porcentaje_Al_1_2= tamano_8*100/data_total
print('Los pacientes con nivel de azúcar 2 y que padecen la enfermedad son: ',  tamano_8,'-->',porcentaje_Al_1_2, '%' )

data_Al_1_3= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Su'] == 3)]
tamano_9= data_Al_1_3['Su'].size
porcentaje_Al_1_3= tamano_9*100/data_total
print('Los pacientes con nivel de azúcar 3 y que  padecen la enfermedad son: ', tamano_9, '-->',porcentaje_Al_1_3, '%' )

data_Al_1_4= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Su'] == 4)]
tamano_10= data_Al_1_4['Su'].size
porcentaje_Al_1_4= tamano_10*100/data_total
print('Los pacientes con nivel de azúcar 4 y que padecen la enfermedad son: ',  tamano_10, '-->',porcentaje_Al_1_4, '%' )

data_Al_1_5= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Su'] == 5)]
tamano_11= data_Al_1_5['Su'].size
porcentaje_Al_1_5= tamano_11*100/data_total
print('Los pacientes con nivel de azúcar 5 y que padecen la enfermedad son: ',  tamano_11, '-->',porcentaje_Al_1_5, '%' )

"""Para los pacientes que no padecen de ERC sus niveles de azúcar son normales (0), por otro lado los pacientes que si padecen de la enfermedad, se dividen en 2 grupos: unos que tienen unos niveles de azúcar alta pero su afectación en la población es escaza (15.25%) y otros que tienen un nivel de azúcar normal y afectan a la mayoría de la población, por lo que se puede concluir que así no haya problemas de azúcar hay alto riesgo a padecer la enfermedad (47.25%).

Si comparamos con la proporción anterior entre el atributo albúmina y la clase, los datos de azúcar pueden ser más claros y certeros para concluir, pues en albúmina los porcentajes de personas que padecían la enfermedad con niveles de albúmina altos eran muy variados, sin embargo en la azúcar esos porcentajes se reducen bastante respecto al porcentaje principal de padecer la enfermedad así no exista problemas de azúcar.
"""

#Proporción entre glóbulos rojos normales o alterados (0,1) y la clase (1 y 0)
#No padecer la enfermedad
data_Al_0_0= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Rbc'] == 0)]
tamano_0= data_Al_0_0['Rbc'].size
porcentaje_Al_0_0= tamano_0*100/data_total
print('Los pacientes con glóbulos rojos normales y  que no padecen la enfermedad son: ',tamano_0 , '-->',porcentaje_Al_0_0,'%')

data_Al_0_1= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Rbc'] == 1)]
tamano_1=data_Al_0_1['Rbc'].size
porcentaje_Al_0_1= tamano_1*100/data_total
print('Los pacientes con glóbulos rojos alterados y que no padecen la enfermedad son: ',tamano_1, '-->',porcentaje_Al_0_1, '%')

#Padecer la enfermedad
data_Al_1_0= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Rbc'] == 0)]
tamano_2= data_Al_1_0['Rbc'].size
porcentaje_Al_1_0= tamano_2*100/data_total
print('Los pacientes con  glóbulos rojos normales y que padecen la enfermedad son: ',tamano_2,'-->',porcentaje_Al_1_0, '%' )

data_Al_1_1= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Rbc'] == 1)]
tamano_3= data_Al_1_1['Rbc'].size
porcentaje_Al_1_1= tamano_3*100/data_total
print('Los pacientes con glóbulos rojos alterados  y que padecen la enfermedad son: ', tamano_3,'-->',porcentaje_Al_1_1, '%' )

"""Se puede concluir que la mayoría de pacientes padecen ERC por alteraciones en sus niveles de glóbulos rojos, ya que puede ser una posible causa de anemia y la anemia es factor de progresión de la ERC, sin embargo hay un porcentaje también considerable de la población que tiene los globulos rojos alterados pero no padece de ERC, esto puede ser porque no es una situación tan grave de anemia o aún no ha llegado a ser.

Comparado con las proporciones anteriores, esta puede ser un poco más certera y considerarse como una causa de ERC, pues en su mayoría de la población la tendencia es a padecer la enfermedad por alteraciones en los niveles de glóbulos rojos.
"""

#Proporción entre ser hipertenso o no (0,1) y la clase (1 y 0)
#No padecer la enfermedad
data_Al_0_0= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Htn'] == 0)]
tamano_0= data_Al_0_0['Htn'].size
porcentaje_Al_0_0= tamano_0*100/data_total
print('Los pacientes sin hipertensión  y  que no padecen la enfermedad son: ',tamano_0 , '-->',porcentaje_Al_0_0,'%')

data_Al_0_1= data_categorico[(data_categorico['Class'] ==0) & (data_categorico['Htn'] == 1)]
tamano_1=data_Al_0_1['Htn'].size
porcentaje_Al_0_1= tamano_1*100/data_total
print('Los pacientes hipertensos y que no padecen la enfermedad son: ',tamano_1, '-->',porcentaje_Al_0_1, '%')

#Padecer la enfermedad
data_Al_1_0= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Htn'] == 0)]
tamano_2= data_Al_1_0['Htn'].size
porcentaje_Al_1_0= tamano_2*100/data_total
print('Los pacientes sin hipertensión y que padecen la enfermedad son: ',tamano_2,'-->',porcentaje_Al_1_0, '%' )

data_Al_1_1= data_categorico[(data_categorico['Class'] ==1) & (data_categorico['Htn'] == 1)]
tamano_3= data_Al_1_1['Htn'].size
porcentaje_Al_1_1= tamano_3*100/data_total
print('Los pacientes hipertensos y que padecen la enfermedad son: ', tamano_3,'-->',porcentaje_Al_1_1, '%' )

"""Gracias a esta proporción se puede notar que la población no padece ERC si no son hipertensos, pero si hay pacientes que padecen la enfermedad y pueden o no ser hipertensos, sin embargo la tendencia es a que sean hipertensos, pues presenta mayor porcentaje.

Nota: no se llega al 100% pues hay un error en esta columna del dataset y sale un valor de 0.37, pero los únicos posibles valores son 0(no hipertenso) y 1 (hipertenso)

De acuerdo a las 4 proporciones realizadas anteriormente se puede concluir que algunas no afectan tanto a la clase o pueden ser confusas al momento de intentar diagnosticar o predecir ERC, por ejemplo los niveles de albúmina son variables cuando se presenta la enfermedad, se puede padecer en mayor medida entre niveles de 0 a 4, y sus porcentajes son muy cercanos entre sí, por lo que no hay una tendencia. Similar sucede con la azúcar, pues la tendencia es a que los pacientes padezcan la enfermedad incluso con niveles de azúcar normales (0), por lo que no se puede asegurar que la azúcar será una causa verídica para sufir de ERC. Los atributos de glóbulos rojos y de hipertensión por otro lado si podrían servir para el diagnostico pues su variabilidad es mínima y tiene una tendencia definida, para el caso de Rbc, se padece la enfermedad en su mayoría cuando los niveles de glóbulos rojos están alterado. Para el atributo Htn la tendencia es a padecer la enfermedad en pacientes hipertensos y a no padecerla en pacientes no hipertensos.
"""

#RELACIONES
#Partiendo del dataset reducido con 7 atributos y clase
data_reducido=data_disease.loc[:,['Htn', 'Su', 'Rbcc', 'Hemo', 'Sc', 'Al', 'Bu','Class']]
print(data_reducido)

#RELACIONES
#Hipertensión(Htn) y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Htn", color ='#FF7F50')
plt.title("Relación entre Hipertensión y la Clase")

"""El atributo hipertensión tiene 2 posibles valores:

0--> No es hipertenso
1--> Es hipertenso

Por lo que podemos ver que este atributo no es un factor clave para padecer la enfermedad, pues así la persona no sea hipertensa, sufre de ERC.
Sin embargo es notable un error en el dataset pues existe un valor de 0.37 en el atributo hipertensión, lo cúal no es valido.
"""

#Azúcar(Su) y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Su", color ='#BFBF00')
plt.title("Relación entre Azúcar y la Clase")

"""Por esta gráfica se puede notar que el atributo azúcar tiene una relación directa con la clase, ya que personas con un nivel de azucar mayor a 1 (posiblemente diabeticas) padecen enfermedad renal crónica."""

#Conteo de Glóbulos Rojos(Rbcc) y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Rbcc", color ='#8FBC8F')
plt.title("Relación entre Glóbulos Rojos y la Clase")

"""Para analizar esta gráfica, se debe recordar que entre niveles más bajos tenga el paciente de conteo de glóbulos rojos (Rbcc) más probabilidad a que su hemoglobina sea baja también y padezca de anemia, un factor que influye para sufir ERC.

Por lo que si analizamos la gráfica podemos notar la certeza de los datos y la relevancia del atributo Rbcc, pues entre niveles más bajos de glóbulos rojos (indicador de anemia), se está padeciendo de enfermedad renal crónica (clase es 1). Por otro lado si hay un nivel más alto de glóbulos no se padece la enfermedad (clase es 0).
"""

#Hemoglobina(Hemo) y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Rbcc", color ='#FF7F50')
plt.title("Relación entre Hemoglobina y la Clase")

"""La hemoglobina es la parte del glóbulo rojo que transporta el oxígeno a todas las células en su cuerpo. Es un factor muy importante para examinar si una persona padece anemia, pues si sus valores  de hemoglobina son más bajos de lo normal existe alta probabilidad de sufrir la misma, la cual es un factor de suceptibilidad para sufir de enfermedad renal.

Por lo que podemos ver el atributo hemoglobina tiene alata relación con la clase, ya que entre menores sean los niveles de hemoglobina la persona padece enfermdad renal crónica.
"""

#Serum Creatinina(Sc) y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Sc", color ='#8A2BE2')
plt.title("Relación entre Serum Creatinina y la Clase")

"""Para tener clara la relación entre el atributo Serum Creatinina y la Clase se debe recordar que cuando se sufre de un problema con los riñones, la creatinina presenta niveles mayores en la sangre, pues se puede acumular y sale menos por la orina.

En la gráfica es notorio que se padece la enfermedad con niveles más altos de Sc en la sangre, por lo que es un atributo verídico y certero para detectar la enfermedad o ver en qué etapa se encuentre.
"""

#Albúmina y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Al", color ='#FF00FF')
plt.title("Relación entre la Albúmina y la Clase")

"""El atributo Albúmina es clave para el diagnóstico y estado de una enfermedad renal, pues la presencia de concentraciones elevadas de proteína o albúmina en la orina de forma persistente es un signo de lesión renal.

Por lo que podemos ver su directa relación con la clase pues entre mayor sea los niveles de albúmina categorizados en 0,1,2,4, se padece ERC.
"""

#Úrea en la sangre y Clase
sns.scatterplot(data=data_reducido, x="Class", y="Bu", color ='#FF4500')
plt.title("Relación entre Úrea en la sangre y la Clase")

"""La úrea en la sangre es el producto final del metabolismo de las proteínas.Una de las causas de elevación de urea en sangre es la disminución de la capacidad de concentración del riñón.
Por lo que en la gráfica se puede notar que hay una relación directa y es un atributo inluyente en la clase, pues a mayor nivel de úrea en la sangre,  se padece la enfermedad.
"""

#Medidas de distribución de frecuencia
#Atributo Htn (hipertensión)
Htn_counts=(data_reducido.groupby("Htn").agg(frequency=("Htn", "count")))
Htn_counts["cum_frequency"] =Htn_counts["frequency"].cumsum()
Htn_counts

#Atributo Su(azúcar)
Su_counts=(data_reducido.groupby("Su").agg(frequency=("Su", "count")))
Su_counts["cum_frequency"] =Su_counts["frequency"].cumsum()
Su_counts

#Atributo Rbcc (conteo de glóbulos rojos)
Rbcc_counts=(data_reducido.groupby("Rbcc").agg(frequency=("Rbcc", "count")))
Rbcc_counts["cum_frequency"] =Rbcc_counts["frequency"].cumsum()
Rbcc_counts

#Atributo Hemo (hemoglobina)
Hemo_counts=(data_reducido.groupby("Hemo").agg(frequency=("Hemo", "count")))
Hemo_counts["cum_frequency"] =Hemo_counts["frequency"].cumsum()
Hemo_counts

#Atributo Sc (Serum Creatinina)
Sc_counts=(data_reducido.groupby("Sc").agg(frequency=("Sc", "count")))
Sc_counts["cum_frequency"] =Sc_counts["frequency"].cumsum()
Sc_counts

#Atributo Al (Albúmina)
Al_counts=(data_reducido.groupby("Al").agg(frequency=("Al", "count")))
Al_counts["cum_frequency"] =Al_counts["frequency"].cumsum()
Al_counts

#Atributo Bu (Urea en sangre)
Bu_counts=(data_reducido.groupby("Bu").agg(frequency=("Bu", "count")))
Bu_counts["cum_frequency"] =Bu_counts["frequency"].cumsum()
Bu_counts

#Medidas de tendencia central
#Atributo hipertensión (Htn)
#Conteo
conteo_htn=data_reducido['Htn'].value_counts()
#Media
media_htn=data_reducido['Htn'].mean()
#Mediana
mediana_htn=data_reducido['Htn'].median()
#Moda
moda_htn=data_reducido['Htn'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_htn, '\n')
print('La media para el atributo Htn:', media_htn)
print('La mediana para el atributo Htn:', mediana_htn)
print('La moda para el atributo Htn:', moda_htn)

#Atributo Azúcar (Su)
#Conteo
conteo_su=data_reducido['Su'].value_counts()
#Media
media_su=data_reducido['Su'].mean()
#Mediana
mediana_su=data_reducido['Su'].median()
#Moda
moda_su=data_reducido['Su'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_su, '\n')
print('La media para el atributo Su:', media_su)
print('La mediana para el atributo Su:', mediana_su)
print('La moda para el atributo Su:', moda_su)

#Atributo Conteo de glóbulos rojos (Rbcc)
#Conteo
conteo_rbcc=data_reducido['Rbcc'].value_counts()
#Media
media_rbcc=data_reducido['Rbcc'].mean()
#Mediana
mediana_rbcc=data_reducido['Rbcc'].median()
#Moda
moda_rbcc=data_reducido['Rbcc'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_rbcc, '\n')
print('La media para el atributo Rbcc:', media_rbcc)
print('La mediana para el atributo Rbcc:', mediana_rbcc)
print('La moda para el atributo Rbcc:', moda_rbcc)

#Atributo Hemoglobima (Hemo)
#Conteo
conteo_hemo=data_reducido['Hemo'].value_counts()
#Media
media_hemo=data_reducido['Hemo'].mean()
#Mediana
mediana_hemo=data_reducido['Hemo'].median()
#Moda
moda_hemo=data_reducido['Hemo'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_hemo, '\n')
print('La media para el atributo Hemo:', media_hemo)
print('La mediana para el atributo Hemo:', mediana_hemo)
print('La moda para el atributo Hemo:', moda_hemo)

#Atributo Serum Creatinina (Sc)
#Conteo
conteo_sc=data_reducido['Sc'].value_counts()
#Media
media_sc=data_reducido['Sc'].mean()
#Mediana
mediana_sc=data_reducido['Sc'].median()
#Moda
moda_sc=data_reducido['Sc'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_sc, '\n')
print('La media para el atributo Sc:', media_sc)
print('La mediana para el atributo Sc:', mediana_sc)
print('La moda para el atributo Sc:', moda_sc)

#Atributo Serum Albúmina (Al)
#Conteo
conteo_al=data_reducido['Al'].value_counts()
#Media
media_al=data_reducido['Al'].mean()
#Mediana
mediana_al=data_reducido['Al'].median()
#Moda
moda_al=data_reducido['Al'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_al, '\n')
print('La media para el atributo Al:', media_al)
print('La mediana para el atributo Al:', mediana_al)
print('La moda para el atributo Al:', moda_al)

#Atributo Urea en la sangre (Bu)
#Conteo
conteo_bu=data_reducido['Bu'].value_counts()
#Media
media_bu=data_reducido['Bu'].mean()
#Mediana
mediana_bu=data_reducido['Bu'].median()
#Moda
moda_bu=data_reducido['Bu'].mode()


print('El numero de ocurrencias totales es:','\n', conteo_al, '\n')
print('La media para el atributo Bu:', media_bu)
print('La mediana para el atributo Bu:', mediana_bu)
print('La moda para el atributo Bu:', moda_bu)

#Medidas de dispersión
#Atributo Hipertensión (Htn)
varianza_htn=data_reducido['Htn'].var()
desv_htn= np.std(data_reducido['Htn'])
desv_media=(data_reducido['Htn'] - data_reducido['Htn'].mean()).abs().mean()
rango_htn= data_reducido['Htn'].max() - data_reducido['Htn'].min()
cuartil1_htn=data_reducido['Htn'].quantile(.25)
cuartil2_htn=data_reducido['Htn'].quantile(.5)
cuartil3_htn=data_reducido['Htn'].quantile(.75)
intercuartil_htn= cuartil3_htn -  cuartil1_htn

print('La varianza es:', varianza_htn)
print('La desviación estandar es:', desv_htn)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_htn)
print('El primer cuartil es:', cuartil1_htn)
print('El segundo cuartil es:', cuartil2_htn)
print('El segundo cuartil es:', cuartil3_htn)
print('El rango intercuartil es:', intercuartil_htn)

"""Si se quisiera sacar los quintiles, deciles o percentiles, se hace de la misma manera pero cambia la división de la distribución. Para el caso de quintiles cada 20%, para deciles cada 10% y para percentiles cada 1%."""

#Atributo Azúcar (Su)
varianza_su=data_reducido['Su'].var()
desv_su= np.std(data_reducido['Su'])
desv_media=(data_reducido['Su'] - data_reducido['Su'].mean()).abs().mean()
rango_su= data_reducido['Su'].max() - data_reducido['Su'].min()
cuartil1_su=data_reducido['Su'].quantile(.25)
cuartil2_su=data_reducido['Su'].quantile(.5)
cuartil3_su=data_reducido['Su'].quantile(.75)
intercuartil_su= cuartil3_su -  cuartil1_su

print('La varianza es:', varianza_su)
print('La desviación estandar es:', desv_su)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_su)
print('El primer cuartil es:', cuartil1_su)
print('El segundo cuartil es:', cuartil2_su)
print('El segundo cuartil es:', cuartil3_su)
print('El rango intercuartil es:', intercuartil_su)

#Atributo conteo de glóbulos rojos (Rbcc)
varianza_rbcc=data_reducido['Rbcc'].var()
desv_rbcc= np.std(data_reducido['Rbcc'])
desv_media=(data_reducido['Rbcc'] - data_reducido['Rbcc'].mean()).abs().mean()
rango_rbcc= data_reducido['Rbcc'].max() - data_reducido['Rbcc'].min()
cuartil1_rbcc=data_reducido['Rbcc'].quantile(.25)
cuartil2_rbcc=data_reducido['Rbcc'].quantile(.5)
cuartil3_rbcc=data_reducido['Rbcc'].quantile(.75)
intercuartil_rbcc= cuartil3_rbcc -  cuartil1_rbcc

print('La varianza es:', varianza_rbcc)
print('La desviación estandar es:', desv_rbcc)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_rbcc)
print('El primer cuartil es:', cuartil1_rbcc)
print('El segundo cuartil es:', cuartil2_rbcc)
print('El segundo cuartil es:', cuartil3_rbcc)
print('El rango intercuartil es:', intercuartil_rbcc)

#Atributo hemoglobina (Hemo)
varianza_hemo=data_reducido['Hemo'].var()
desv_hemo= np.std(data_reducido['Hemo'])
desv_media=(data_reducido['Hemo'] - data_reducido['Hemo'].mean()).abs().mean()
rango_hemo= data_reducido['Hemo'].max() - data_reducido['Hemo'].min()
cuartil1_hemo=data_reducido['Hemo'].quantile(.25)
cuartil2_hemo=data_reducido['Hemo'].quantile(.5)
cuartil3_hemo=data_reducido['Hemo'].quantile(.75)
intercuartil_hemo= cuartil3_hemo -  cuartil1_hemo

print('La varianza es:', varianza_hemo)
print('La desviación estandar es:', desv_hemo)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_hemo)
print('El primer cuartil es:', cuartil1_hemo)
print('El segundo cuartil es:', cuartil2_hemo)
print('El segundo cuartil es:', cuartil3_hemo)
print('El rango intercuartil es:', intercuartil_hemo)

#Atributo serum creatinina(Sc)
varianza_sc=data_reducido['Sc'].var()
desv_sc= np.std(data_reducido['Sc'])
desv_media=(data_reducido['Sc'] - data_reducido['Sc'].mean()).abs().mean()
rango_sc= data_reducido['Sc'].max() - data_reducido['Sc'].min()
cuartil1_sc=data_reducido['Sc'].quantile(.25)
cuartil2_sc=data_reducido['Sc'].quantile(.5)
cuartil3_sc=data_reducido['Sc'].quantile(.75)
intercuartil_sc= cuartil3_sc -  cuartil1_sc

print('La varianza es:', varianza_sc)
print('La desviación estandar es:', desv_sc)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_sc)
print('El primer cuartil es:', cuartil1_sc)
print('El segundo cuartil es:', cuartil2_sc)
print('El segundo cuartil es:', cuartil3_sc)
print('El rango intercuartil es:', intercuartil_sc)

#Atributo serum albúmina (Al)
varianza_al=data_reducido['Al'].var()
desv_al= np.std(data_reducido['Al'])
desv_media=(data_reducido['Al'] - data_reducido['Al'].mean()).abs().mean()
rango_al= data_reducido['Al'].max() - data_reducido['Al'].min()
cuartil1_al=data_reducido['Al'].quantile(.25)
cuartil2_al=data_reducido['Al'].quantile(.5)
cuartil3_al=data_reducido['Al'].quantile(.75)
intercuartil_al= cuartil3_al -  cuartil1_al

print('La varianza es:', varianza_al)
print('La desviación estandar es:', desv_al)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_al)
print('El primer cuartil es:', cuartil1_al)
print('El segundo cuartil es:', cuartil2_al)
print('El segundo cuartil es:', cuartil3_al)
print('El rango intercuartil es:', intercuartil_al)

#Atributo urea en la sangre (Bu)
varianza_bu=data_reducido['Bu'].var()
desv_bu= np.std(data_reducido['Bu'])
desv_media=(data_reducido['Bu'] - data_reducido['Bu'].mean()).abs().mean()
rango_bu= data_reducido['Bu'].max() - data_reducido['Bu'].min()
cuartil1_bu=data_reducido['Bu'].quantile(.25)
cuartil2_bu=data_reducido['Bu'].quantile(.5)
cuartil3_bu=data_reducido['Bu'].quantile(.75)
intercuartil_bu= cuartil3_bu -  cuartil1_bu

print('La varianza es:', varianza_bu)
print('La desviación estandar es:', desv_bu)
print('El desvío absoluto medio es:', desv_media)
print('El rango es:', rango_bu)
print('El primer cuartil es:', cuartil1_bu)
print('El segundo cuartil es:', cuartil2_bu)
print('El segundo cuartil es:', cuartil3_bu)
print('El rango intercuartil es:', intercuartil_bu)

#Medidas de distribución o forma

#Atributo hipertension (Htn)
# calcular el sesgo de la asimetría de la muestra
asimetria_htn=sp.skew(data_reducido['Htn'])
curtosis_htn=sp.kurtosis(data_reducido['Htn'])

print('El nivel de asimetría es:', asimetria_htn)
print('La curtosis es:', curtosis_htn)

"""El coeficiente de asimetría dió >0, lo que quiere decir que existe mayor concentración de valores a la derecha de la media que a su izquierda

La curtosis es <0 (negativa), lo que indica que tiene una distribución platicúrtica, lo que quiere decir que los valores presentan un reducido grado de concentración respecto al centro y se distribuyen prácticamente a lo largo de todo el rango.
"""

# Atributo de Azúcar(Su)
# calcular el sesgo de la asimetría de la muestra
asimetria_su=sp.skew(data_reducido['Su'])
curtosis_su=sp.kurtosis(data_reducido['Su'])

print('El nivel de asimetría es:', asimetria_su)
print('La curtosis es:', curtosis_su)